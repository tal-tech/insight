//
//  SADelegateProxy.m
//  SensorsAnalyticsSDK
//
//  Created by Âº†ÊïèË∂Öüçé on 2019/6/19.
//  Copyright ¬© 2019 SensorsData. All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

#if ! __has_feature(objc_arc)
#error This file must be compiled with ARC. Either turn on ARC for the project or use -fobjc-arc flag on this file.
#endif

#import "SADelegateProxy.h"
#import "SAClassHelper.h"
#import "SAMethodHelper.h"
#import "NSObject+DelegateProxy.h"
#import <objc/message.h>

@implementation SADelegateProxy

/// Overridden instance class method
- (Class)class {
    if (self.sensorsdata_className) {
        return NSClassFromString(self.sensorsdata_className);
    }
    return [super class];
}

+ (void)proxyDelegate:(id)delegate selectors:(NSSet<NSString *> *)selectors {
    if (selectors.count < 1) {
        return;
    }
    
    Class proxyClass = [self class];
    NSMutableSet *delegateSelectors = [NSMutableSet setWithSet:selectors];
    
    // ÂΩìÂâç‰ª£ÁêÜÂØπË±°Â∑≤ÁªèÂ§ÑÁêÜËøá
    if ([delegate sensorsdata_className]) {
        NSMutableSet *currentSelectors = [NSMutableSet setWithSet:[delegate sensorsdata_selectors]];
        if (currentSelectors.count > 0) {
            [delegateSelectors minusSet:currentSelectors];
        }
        
        if (delegateSelectors.count < 1) {
            return;
        }
        
        [self addInstanceMethodWithSelectors:delegateSelectors fromClass:proxyClass toClass:[SAClassHelper realClassWithObject:delegate]];
        [delegateSelectors unionSet:currentSelectors];
        [delegate setSensorsdata_selectors:[delegateSelectors copy]];
        [delegate setSensorsdata_delegateProxy:self];
        return;
    }
    
    [delegate setSensorsdata_selectors:[delegateSelectors copy]];
    [delegate setSensorsdata_delegateProxy:self];
    // KVO ÂàõÂª∫Â≠êÁ±ªÂêé‰ºöÈáçÂÜô - (Class)class ÊñπÊ≥ï, Áõ¥Êé•ÈÄöËøá object.class Êó†Ê≥ïËé∑ÂèñÁúüÂÆûÁöÑÁ±ª
    Class realClass = [SAClassHelper realClassWithObject:delegate];
    // Â¶ÇÊûúÂΩìÂâç‰ª£ÁêÜÂØπË±°ÂΩíÂ±û‰∏∫ KVO ÂàõÂª∫ÁöÑÁ±ª, ÂàôÊó†ÈúÄÊñ∞Âª∫Â≠êÁ±ª
    if ([self isKVOClass:realClass]) {
        // ËÆ∞ÂΩï KVO ÁöÑÁà∂Á±ª(KVO ‰ºöÈáçÂÜô class ÊñπÊ≥ï, ËøîÂõûÁà∂Á±ª)
        [delegate setSensorsdata_className:NSStringFromClass([delegate class])];
        if ([realClass isKindOfClass:[NSObject class]]) {
            // Âú®ÁßªÈô§ÊâÄÊúâÁöÑ KVO Â±ûÊÄßÁõëÂê¨Êó∂, Á≥ªÁªü‰ºöÈáçÁΩÆÂØπË±°ÁöÑ isa ÊåáÈíà‰∏∫ÂéüÊúâÁöÑÁ±ª; Âõ†Ê≠§ÈúÄË¶ÅÂú®ÁßªÈô§ÁõëÂê¨Êó∂, ÈáçÊñ∞‰∏∫‰ª£ÁêÜÂØπË±°ËÆæÁΩÆÊñ∞ÁöÑÂ≠êÁ±ª, Êù•ÈááÈõÜÁÇπÂáª‰∫ã‰ª∂
            [SAMethodHelper addInstanceMethodWithSelector:@selector(removeObserver:forKeyPath:) fromClass:proxyClass toClass:realClass];
        }
        
        // Áªô KVO ÁöÑÁ±ªÊ∑ªÂä†ÈúÄË¶Å hook ÁöÑÊñπÊ≥ï
        [self addInstanceMethodWithSelectors:delegateSelectors fromClass:proxyClass toClass:realClass];
        return;
    }
    
    // ÂàõÂª∫Á±ª
    NSString *dynamicClassName = [SADelegateProxy generateSensorsClassName:delegate];
    Class dynamicClass = [SAClassHelper allocateClassWithObject:delegate className:dynamicClassName];
    if (!dynamicClass) {
        return;
    }
    
    // ÁªôÊñ∞ÂàõÂª∫ÁöÑÁ±ªÊ∑ªÂä†ÈúÄË¶Å hook ÁöÑÊñπÊ≥ï
    [self addInstanceMethodWithSelectors:delegateSelectors fromClass:proxyClass toClass:dynamicClass];

    if ([realClass isKindOfClass:[NSObject class]]) {
        // Êñ∞Âª∫Â≠êÁ±ªÂêé,ÈúÄË¶ÅÁõëÂê¨ÊòØÂê¶Ê∑ªÂä†‰∫Ü KVO, Âõ†‰∏∫Ê∑ªÂä† KVO Â±ûÊÄßÁõëÂê¨Âêé, KVO ‰ºöÈáçÂÜô Class ÊñπÊ≥ï, ÂØºËá¥Ëé∑ÂèñÁöÑ Class ‰∏∫Á•ûÁ≠ñÊ∑ªÂä†ÁöÑÂ≠êÁ±ª
        [SAMethodHelper addInstanceMethodWithSelector:@selector(addObserver:forKeyPath:options:context:) fromClass:proxyClass toClass:dynamicClass];
    }
    
    // ËÆ∞ÂΩïÂØπË±°ÁöÑÂéüÂßãÁ±ªÂêç (Âõ†‰∏∫ class ÊñπÊ≥ïÈúÄË¶Å‰ΩøÁî®, ÊâÄ‰ª•Âú®ÈáçÂÜô class ÊñπÊ≥ïÂâçËÆæÁΩÆ)
    [delegate setSensorsdata_className:NSStringFromClass(realClass)];
    // ÈáçÂÜô - (Class)class ÊñπÊ≥ïÔºåÈöêËóèÊñ∞Ê∑ªÂä†ÁöÑÂ≠êÁ±ª
    [SAMethodHelper addInstanceMethodWithSelector:@selector(class) fromClass:proxyClass toClass:dynamicClass];
    
    // ‰ΩøÁ±ªÁîüÊïà
    [SAClassHelper registerClass:dynamicClass];
    
    // ÊõøÊç¢‰ª£ÁêÜÂØπË±°ÊâÄÂΩíÂ±ûÁöÑÁ±ª
    if ([SAClassHelper setObject:delegate toClass:dynamicClass]) {
        // Âú®ÂØπË±°ÈáäÊîæÊó∂, ÈáäÊîæÂàõÂª∫ÁöÑÂ≠êÁ±ª
        [delegate sensorsdata_registerDeallocBlock:^{
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                [SAClassHelper disposeClass:dynamicClass];
            });
        }];
    }
}

+ (void)addInstanceMethodWithSelectors:(NSSet<NSString *> *)selectors fromClass:(Class)fromClass toClass:(Class)toClass {
    for (NSString *selector in selectors) {
        SEL sel = NSSelectorFromString(selector);
        [SAMethodHelper addInstanceMethodWithSelector:sel fromClass:fromClass toClass:toClass];
    }
}

+ (void)invokeWithTarget:(NSObject *)target selector:(SEL)selector, ... {
    Class originalClass = NSClassFromString(target.sensorsdata_className) ?: target.superclass;
    
    va_list args;
    va_start(args, selector);
    id arg1 = nil, arg2 = nil, arg3 = nil, arg4 = nil;
    NSInteger count = [NSStringFromSelector(selector) componentsSeparatedByString:@":"].count - 1;
    for (NSInteger i = 0; i < count; i++) {
        i == 0 ? (arg1 = va_arg(args, id)) : nil;
        i == 1 ? (arg2 = va_arg(args, id)) : nil;
        i == 2 ? (arg3 = va_arg(args, id)) : nil;
        i == 3 ? (arg4 = va_arg(args, id)) : nil;
    }
    struct objc_super targetSuper = {
        .receiver = target,
        .super_class = originalClass
    };
    // Ê∂àÊÅØËΩ¨ÂèëÁªôÂéüÂßãÁ±ª
    @try {
        void (*func)(struct objc_super *, SEL, id, id, id, id) = (void *)&objc_msgSendSuper;
        func(&targetSuper, selector, arg1, arg2, arg3, arg4);
    } @catch (NSException *exception) {
//        SALogInfo(@"msgSendSuper with exception: %@", exception);
    } @finally {
        va_end(args);
    }
}

+ (void)resolveOptionalSelectorsForDelegate:(id)delegate {
    NSSet *currentOptionalSelectors = ((NSObject *)delegate).sensorsdata_optionalSelectors;
    NSMutableSet *optionalSelectors = [[NSMutableSet alloc] init];
    if (currentOptionalSelectors) {
        [optionalSelectors unionSet:currentOptionalSelectors];
    }
    
    if ([self respondsToSelector:@selector(optionalSelectors)] &&[self optionalSelectors]) {
        [optionalSelectors unionSet:[self optionalSelectors]];
    }
    ((NSObject *)delegate).sensorsdata_optionalSelectors = [optionalSelectors copy];
}

@end


#pragma mark - KVO
@implementation SADelegateProxy (KVO)

- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
    [super addObserver:observer forKeyPath:keyPath options:options context:context];
    if (self.sensorsdata_className) {
        // Áî±‰∫éÊ∑ªÂä†‰∫Ü KVO Â±ûÊÄßÁõëÂê¨, KVO ‰ºöÂàõÂª∫Â≠êÁ±ªÂπ∂ÈáçÂÜô Class ÊñπÊ≥ï,ËøîÂõûÂéüÂßãÁ±ª; Ê≠§Êó∂ÁöÑÂéüÂßãÁ±ª‰∏∫Á•ûÁ≠ñÊ∑ªÂä†ÁöÑÂ≠êÁ±ª,Âõ†Ê≠§ÈúÄË¶ÅÈáçÂÜô class ÊñπÊ≥ï
        [SAMethodHelper replaceInstanceMethodWithDestinationSelector:@selector(class) sourceSelector:@selector(class) fromClass:SADelegateProxy.class toClass:[SAClassHelper realClassWithObject:self]];
    }
}

- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
    // remove Ââç‰ª£ÁêÜÂØπË±°ÊòØÂê¶ÂΩíÂ±û‰∫é KVO ÂàõÂª∫ÁöÑÁ±ª
    BOOL oldClassIsKVO = [SADelegateProxy isKVOClass:[SAClassHelper realClassWithObject:self]];
    [super removeObserver:observer forKeyPath:keyPath];
    // remove Âêé‰ª£ÁêÜÂØπË±°ÊòØÂê¶ÂΩíÂ±û‰∫é KVO ÂàõÂª∫ÁöÑÁ±ª
    BOOL newClassIsKVO = [SADelegateProxy isKVOClass:[SAClassHelper realClassWithObject:self]];
    
    // ÊúâÂ§ö‰∏™Â±ûÊÄßÁõëÂê¨Êó∂, Âú®ÊúÄÂêé‰∏Ä‰∏™ÁõëÂê¨Ë¢´ÁßªÈô§Âêé, ÂØπË±°ÁöÑ isa ÂèëÁîüÂèòÂåñ, ÈúÄË¶ÅÈáçÊñ∞‰∏∫‰ª£ÁêÜÂØπË±°Ê∑ªÂä†Â≠êÁ±ª
    if (oldClassIsKVO && !newClassIsKVO) {
        // Ê∏ÖÁ©∫Â∑≤ÁªèËÆ∞ÂΩïÁöÑÂéüÂßãÁ±ª
        self.sensorsdata_className = nil;
        Class delegateProxy = [self.sensorsdata_delegateProxy class];
        if ([delegateProxy respondsToSelector:NSSelectorFromString(@"proxyDelegate:selectors:")]) {
            [delegateProxy proxyDelegate:self selectors:self.sensorsdata_selectors];
        }
    }
}

@end


#pragma mark - Utils
/// Delegate ÁöÑÁ±ªÂâçÁºÄ
static NSString *const kSADelegateSuffix = @"__CN.SENSORSDATA";
static NSString *const kSAKVODelegatePrefix = @"KVONotifying_";
static NSString *const kSAClassSeparatedChar = @".";
static long subClassIndex = 0;

@implementation SADelegateProxy (Utils)

/// ÊòØ‰∏çÊòØ KVO ÂàõÂª∫ÁöÑÁ±ª
/// @param cls Á±ª
+ (BOOL)isKVOClass:(Class _Nullable)cls {
    return [NSStringFromClass(cls) containsString:kSAKVODelegatePrefix];
}

/// ÊòØ‰∏çÊòØÁ•ûÁ≠ñÂàõÂª∫ÁöÑÁ±ª
/// @param cls Á±ª
+ (BOOL)isSensorsClass:(Class _Nullable)cls {
    return [NSStringFromClass(cls) containsString:kSADelegateSuffix];
}

/// ÁîüÊàêÁ•ûÁ≠ñË¶ÅÂàõÂª∫Á±ªÁöÑÁ±ªÂêç
/// @param obj ÂÆû‰æãÂØπË±°
+ (NSString *)generateSensorsClassName:(id)obj {
    Class class = [SAClassHelper realClassWithObject:obj];
    if ([SADelegateProxy isSensorsClass:class]) return NSStringFromClass(class);
    return [NSString stringWithFormat:@"%@%@%@%@", NSStringFromClass(class), kSAClassSeparatedChar, @(subClassIndex++), kSADelegateSuffix];
}

@end
